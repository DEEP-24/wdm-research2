generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(uuid()) @map("id")
  firstName String
  lastName  String

  email    String @unique
  password String

  imageUrl String

  researchInterests String?
  expertise         String?

  role UserRole

  phone   String
  street  String
  apt     String
  city    String
  state   String
  zipcode String
  dob     DateTime

  linkedInUrl String?
  twitterUrl  String?
  githubUrl   String?

  papers String?

  events AcademicEvent[]

  registrations AcademicEventRegistration[]

  projectProposals ProjectProposal[]

  proposalReviews ProjectProposalReview[]

  following  FollowersFollowings[] @relation("follower")
  followedBy FollowersFollowings[] @relation("following")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  sharedFiles Files[]

  forums Forum[]
  posts  Post[]

  submittedApplications GrantApplication[] @relation("SubmittedApplications")
  reviewedApplications  GrantApplication[] @relation("ReviewedApplications")

  createdOpportunities           FundingOpportunity[]    @relation("CreatedOpportunities")
  createdInvestmentOpportunities InvestmentOpportunity[] @relation("CreatedOpportunities")
  investments                    Investment[]            @relation("UserInvestments")

  sentMessages     Chat[] @relation("SentMessages")
  receivedMessages Chat[] @relation("ReceivedMessages")

  @@map("users")
}

model Chat {
  id      String   @id @default(uuid())
  content String   @db.Text
  sentAt  DateTime @default(now())
  isRead  Boolean  @default(false)

  sender   User   @relation("SentMessages", fields: [senderId], references: [id])
  senderId String

  receiver   User   @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String

  @@index([senderId])
  @@index([receiverId])
  @@map("chats")
}

model FollowersFollowings {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("followers_followings")
}

model AcademicEvent {
  id                   String    @id @default(uuid()) @map("id")
  title                String
  description          String?
  startDate            DateTime?
  endDate              DateTime?
  location             String?
  isVirtual            Boolean   @default(false)
  maxAttendees         Int?
  registrationDeadline DateTime?
  status               String?

  sessions      AcademicEventSession[]
  registrations AcademicEventRegistration[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("academic_events")
}

model AcademicEventSession {
  id           String    @id @default(uuid()) @map("id")
  title        String
  description  String?
  startTime    DateTime?
  endTime      DateTime?
  location     String?
  maxAttendees Int?

  event   AcademicEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String

  registrations AcademicEventRegistration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("academic_event_sessions")
}

model AcademicEventRegistration {
  id          String   @id @default(uuid()) @map("id")
  bookingDate DateTime @default(now())

  event   AcademicEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String

  session   AcademicEventSession? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("academic_event_registrations")
}

model ProjectProposal {
  id          String         @id @default(uuid()) @map("id")
  title       String
  description String?
  status      ProposalStatus @default(SUBMITTED)
  submittedAt DateTime       @default(now()) @db.Timestamp(6)
  attachments String?

  proposalReviews ProjectProposalReview[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  grantApplications GrantApplication[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("project_proposals")
}

model ProjectProposalReview {
  id String @id @default(uuid()) @map("id")

  feedback   String?
  reviewedAt DateTime @default(now()) @db.Timestamp(6)

  projectProposal   ProjectProposal? @relation(fields: [projectProposalId], references: [id])
  projectProposalId String?

  reviewer   User   @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewerId String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("project_proposal_reviews")
}

model Files {
  id String @id @default(uuid()) @map("id")

  customName String

  uploadDate DateTime @default(now())
  fileUrl    String

  uploadedBy User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("files")
}

model Forum {
  id          String @id @default(uuid()) @map("id")
  name        String
  description String
  posts       Post[]

  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("forums")
}

model Post {
  id      String @id @default(uuid()) @map("id")
  title   String
  content String @db.Text

  forum   Forum  @relation(fields: [forumId], references: [id], onDelete: Cascade)
  forumId String

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("posts")
}

model GrantApplication {
  id            String      @id @default(uuid()) @map("id")
  requestAmount Float
  keywords      String
  status        GrantStatus @default(SUBMITTED)
  attachments   Json?

  projectProposal   ProjectProposal @relation(fields: [projectProposalId], references: [id], onDelete: Cascade)
  projectProposalId String

  reviewedBy   User?   @relation("ReviewedApplications", fields: [reviewedById], references: [id])
  reviewedById String?

  submittedBy   User   @relation("SubmittedApplications", fields: [submittedById], references: [id])
  submittedById String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("grant_applications")
}

model FundingOpportunity {
  id               String   @id @default(uuid()) @map("id")
  title            String
  description      String
  amount           Float
  deadline         DateTime
  topics           String
  contactEmail     String
  organizationName String
  phoneNumber      String

  createdBy   User   @relation("CreatedOpportunities", fields: [createdById], references: [id])
  createdById String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("funding_opportunities")
}

model InvestmentOpportunity {
  id            String   @id @default(uuid()) @map("id")
  title         String
  description   String
  targetAmount  Float
  currentAmount Float    @default(0)
  deadline      DateTime
  sector        String
  companyName   String
  riskLevel     String

  createdBy   User   @relation("CreatedOpportunities", fields: [createdById], references: [id])
  createdById String

  investments Investment[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("investment_opportunities")
}

model Investment {
  id     String   @id @default(uuid()) @map("id")
  amount Float
  date   DateTime @default(now())

  investor   User   @relation("UserInvestments", fields: [investorId], references: [id])
  investorId String

  opportunity   InvestmentOpportunity @relation(fields: [opportunityId], references: [id])
  opportunityId String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("investments")
}

enum UserRole {
  ADMIN
  ORGANIZER
  INVESTOR
  USER
}

enum ProposalStatus {
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum GrantStatus {
  SUBMITTED
  UNDER_REVIEW
  ACCEPTED
  REJECTED
}
